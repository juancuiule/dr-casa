import Enfermedad.*
import EnfermedadAutoinmune.*
import EnfermedadInfecciosa.*
import Persona.*
import Medico.*
import JefeDeDepartamento.*
import laMuerte.*

describe "Dr. Casa" {

	var malaria
	var otitis
	var lupus
	var otraMalaria
	var logan
	var frank
	var cameron
	var house

	fixture {
		malaria = new EnfermedadInfecciosa(500)
		otitis = new EnfermedadInfecciosa(100)
		lupus = new EnfermedadAutoinmune(10000)
		otraMalaria = new EnfermedadInfecciosa(800)
		logan = new Persona(36, 3000000, #{ malaria, otitis, lupus })
		frank = new Persona(36, 3500000, #{})
		cameron = new Medico(36, 2000000, #{}, 3)
		house = new JefeDeDepartamento(37, 1600000, #{}, 10)
	}

	test "Frank contrae la otraMalaria" {
		frank.contraerEnfermedad(otraMalaria)
		assert.notThat(frank.enfermedades().isEmpty())
	}

	test "La malaria de logan se reproduce y afecta 1000 celulas" {
		malaria.reproducirse()
		assert.equals(1000, malaria.celulasQueAmenaza())
	}

	test "La enfermedad que mas celulas le afecta a logan es 'lupus'" {
		assert.equals(lupus, logan.enfermedadMasDura())
	}

	test "Las celulas afectadas por enfermedades agresivas de logan son 0" {
		assert.equals(0, logan.celulasAfectadasPorEnfermedadesAgresivas())
	}

	test "La enfermedad que mas celulas le afecta a logan despues de 31 dÃ­as es 'lupus'" {
		31.times({ _ => logan.pasarDia()})
		assert.equals(lupus, logan.enfermedadMasDura())
	}

	test "Las celulas afectadas por enfermedades agresivas de logan despues de 31 dÃ­as son 10000" {
		31.times{ _ => logan.pasarDia()}
		assert.equals(10000, logan.celulasAfectadasPorEnfermedadesAgresivas())
	}

	test "La primer malaria se atenua en 100 celulas, queda en 400" {
		malaria.atenuarse(100)
		assert.equals(400, malaria.celulasQueAmenaza())
	}

	test "El lupus se atenua en 500 celulas, queda en 9500" {
		lupus.atenuarse(500)
		assert.equals(9500, lupus.celulasQueAmenaza())
	}

	test "Cameron atiende a logan y sus enfermedades se atenuan en 45 unidades" {
		cameron.atenderA(logan)
		assert.equals(500 - 45, malaria.celulasQueAmenaza())
		assert.equals(100 - 45, otitis.celulasQueAmenaza())
		assert.equals(10000 - 45, lupus.celulasQueAmenaza())
	}

	test "House contrae laMuerte y su temperatura es 0" {
		// Tenemos que contratar a cameron
		// porque cuando house contrae la enfermedad trata de atenderse
		// y deriva la atencion a un integrante de su equipo...
		// si esa lista esta vacia el mensaje anyOne explota ðŸ’¥
		house.contratar(cameron)
		house.contraerEnfermedad(laMuerte)
		house.pasarDia()
		assert.equals(0, house.temperatura())
	}

}

